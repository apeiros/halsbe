#!/usr/bin/env halsbe
author:   Stefan Rusterholz
revision: $Rev$
date:     $Date$
encoding: utf-8
import:   halsbe/CLI/IO
extend:
	:Application: :CLI
+++

---
The CLI module provides rudimentary methods for Command Line Interface
Applications.
---
.module 'CLI':
	.specification:
		"Provides an 'arguments' query in :Application":
			:Application.responds_to 'arguments'
		"Provides an 'env' query in :Application":
			:Application.responds_to 'env'
		"Provides a 'write_line' query in :Application":
			:Application.responds_to 'write_line'
		"Provides a 'read_line' query in :Application":
			:Application.responds_to 'read_line'
		"Provides a 'log' query in :Application":
			:Application.responds_to 'log'

	---
	The name of the current executable (argv[0] in C)
	---
	.query 'executable':
		body:
			returns: executable
	
	---
	The arguments passed to this executable
	---
	.query 'arguments':
		body:
			returns: argv

		postconditions:
			'Returns a List':
				returned.of_type :List

	---
	The environment passed to this executable
	---
	.query 'env':
		body:
			returns: env

		postconditions:
			'Returns a HashMap':
				returned.of_type :HashMap

	---
	Write a line to stdout. Always appends a newline.
	If multiple strings are passed, each is written on a new line.
	The arguments must be convertable to ByteStream's
	---
	.delegate_query 'write_line', :Current.out

	---
	Write a line to stderr. Always appends a newline.
	If multiple strings are passed, each is written on a new line.
	The arguments must be convertable to ByteStream's
	---
	.delegate_query 'log', stderr, :Current.in

	---
	Read a line from stdin.
	Returns nil if end of document is reached.
	---
	.delegate_query 'read_line', :Current.log
