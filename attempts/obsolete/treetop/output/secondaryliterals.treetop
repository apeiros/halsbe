module SecondaryLiterals
  include Treetop::Runtime

  def root
    @root || :secondary_literal
  end

  module SecondaryLiteral0
    def secondary_literal_type
      elements[1]
    end

    def secondary_literal_arguments
      elements[2]
    end

  end

  def _nt_secondary_literal
    start_index = index
    if node_cache[:secondary_literal].has_key?(index)
      cached = node_cache[:secondary_literal][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if input.index("%", index) == index
      r1 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("%")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_secondary_literal_type
      s0 << r2
      if r2
        r3 = _nt_secondary_literal_arguments
        s0 << r3
        if r3
          i4 = index
          r5 = _nt_secondary_curly_braces
          if r5
            r4 = r5
          else
            r6 = _nt_secondary_parens
            if r6
              r4 = r6
            else
              r7 = _nt_secondary_brackets
              if r7
                r4 = r7
              else
                r8 = _nt_secondary_angle
                if r8
                  r4 = r8
                else
                  r9 = _nt_secondary_squote
                  if r9
                    r4 = r9
                  else
                    r10 = _nt_secondary_dquote
                    if r10
                      r4 = r10
                    else
                      r11 = _nt_secondary_backtick
                      if r11
                        r4 = r11
                      else
                        r12 = _nt_secondary_slash
                        if r12
                          r4 = r12
                        else
                          r13 = _nt_secondary_hash
                          if r13
                            r4 = r13
                          else
                            self.index = i4
                            r4 = nil
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = (SecondaryLiteral).new(input, i0...index, s0)
      r0.extend(SecondaryLiteral0)
    else
      self.index = i0
      r0 = nil
    end

    node_cache[:secondary_literal][start_index] = r0

    return r0
  end

  module SecondaryLiteralType0
  end

  def _nt_secondary_literal_type
    start_index = index
    if node_cache[:secondary_literal_type].has_key?(index)
      cached = node_cache[:secondary_literal_type][index]
      @index = cached.interval.end if cached
      return cached
    end

    i1, s1 = index, []
    if input.index(Regexp.new('[A-Za-z_]'), index) == index
      r2 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if input.index(Regexp.new('[A-Za-z0-9_]'), index) == index
          r4 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = SyntaxNode.new(input, i3...index, s3)
      s1 << r3
    end
    if s1.last
      r1 = (SyntaxNode).new(input, i1...index, s1)
      r1.extend(SecondaryLiteralType0)
    else
      self.index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r0 = SyntaxNode.new(input, index...index)
    end

    node_cache[:secondary_literal_type][start_index] = r0

    return r0
  end

  module SecondaryLiteralArguments0
  end

  module SecondaryLiteralArguments1
  end

  def _nt_secondary_literal_arguments
    start_index = index
    if node_cache[:secondary_literal_arguments].has_key?(index)
      cached = node_cache[:secondary_literal_arguments][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if input.index("(", index) == index
      r1 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if input.index(")", index) == index
          r6 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(")")
          r6 = nil
        end
        if r6
          r5 = nil
        else
          self.index = i5
          r5 = SyntaxNode.new(input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = (SyntaxNode).new(input, i4...index, s4)
          r4.extend(SecondaryLiteralArguments0)
        else
          self.index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if input.index('\)', index) == index
            r8 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\)')
            r8 = nil
          end
          if r8
            r3 = r8
          else
            self.index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = SyntaxNode.new(input, i2...index, s2)
      s0 << r2
      if r2
        if input.index(")", index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(")")
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = (SyntaxNode).new(input, i0...index, s0)
      r0.extend(SecondaryLiteralArguments1)
    else
      self.index = i0
      r0 = nil
    end

    node_cache[:secondary_literal_arguments][start_index] = r0

    return r0
  end

  module SecondaryCurlyBraces0
    def secondary_curly_braces
      elements[1]
    end

  end

  module SecondaryCurlyBraces1
  end

  def _nt_secondary_curly_braces
    start_index = index
    if node_cache[:secondary_curly_braces].has_key?(index)
      cached = node_cache[:secondary_curly_braces][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if input.index("{", index) == index
      r2 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("{")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_secondary_curly_braces
      s1 << r3
      if r3
        if input.index("}", index) == index
          r4 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("}")
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = (SyntaxNode).new(input, i1...index, s1)
      r1.extend(SecondaryCurlyBraces0)
    else
      self.index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s5, i5 = [], index
      loop do
        i6 = index
        i7, s7 = index, []
        i8 = index
        if input.index("}", index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("}")
          r9 = nil
        end
        if r9
          r8 = nil
        else
          self.index = i8
          r8 = SyntaxNode.new(input, index...index)
        end
        s7 << r8
        if r8
          if index < input_length
            r10 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r10 = nil
          end
          s7 << r10
        end
        if s7.last
          r7 = (SyntaxNode).new(input, i7...index, s7)
          r7.extend(SecondaryCurlyBraces1)
        else
          self.index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          if input.index('\}', index) == index
            r11 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\}')
            r11 = nil
          end
          if r11
            r6 = r11
          else
            self.index = i6
            r6 = nil
          end
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      r5 = SyntaxNode.new(input, i5...index, s5)
      if r5
        r0 = r5
      else
        self.index = i0
        r0 = nil
      end
    end

    node_cache[:secondary_curly_braces][start_index] = r0

    return r0
  end

  module SecondaryParens0
    def secondary_parens
      elements[1]
    end

  end

  module SecondaryParens1
  end

  def _nt_secondary_parens
    start_index = index
    if node_cache[:secondary_parens].has_key?(index)
      cached = node_cache[:secondary_parens][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if input.index("(", index) == index
      r2 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_secondary_parens
      s1 << r3
      if r3
        if input.index(")", index) == index
          r4 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(")")
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = (SyntaxNode).new(input, i1...index, s1)
      r1.extend(SecondaryParens0)
    else
      self.index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s5, i5 = [], index
      loop do
        i6 = index
        i7, s7 = index, []
        i8 = index
        if input.index(")", index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(")")
          r9 = nil
        end
        if r9
          r8 = nil
        else
          self.index = i8
          r8 = SyntaxNode.new(input, index...index)
        end
        s7 << r8
        if r8
          if index < input_length
            r10 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r10 = nil
          end
          s7 << r10
        end
        if s7.last
          r7 = (SyntaxNode).new(input, i7...index, s7)
          r7.extend(SecondaryParens1)
        else
          self.index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          if input.index('\)', index) == index
            r11 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\)')
            r11 = nil
          end
          if r11
            r6 = r11
          else
            self.index = i6
            r6 = nil
          end
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      r5 = SyntaxNode.new(input, i5...index, s5)
      if r5
        r0 = r5
      else
        self.index = i0
        r0 = nil
      end
    end

    node_cache[:secondary_parens][start_index] = r0

    return r0
  end

  module SecondaryBrackets0
    def secondary_brackets
      elements[1]
    end

  end

  module SecondaryBrackets1
  end

  def _nt_secondary_brackets
    start_index = index
    if node_cache[:secondary_brackets].has_key?(index)
      cached = node_cache[:secondary_brackets][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if input.index("[", index) == index
      r2 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("[")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_secondary_brackets
      s1 << r3
      if r3
        if input.index("]", index) == index
          r4 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("]")
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = (SyntaxNode).new(input, i1...index, s1)
      r1.extend(SecondaryBrackets0)
    else
      self.index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s5, i5 = [], index
      loop do
        i6 = index
        i7, s7 = index, []
        i8 = index
        if input.index("]", index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("]")
          r9 = nil
        end
        if r9
          r8 = nil
        else
          self.index = i8
          r8 = SyntaxNode.new(input, index...index)
        end
        s7 << r8
        if r8
          if index < input_length
            r10 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r10 = nil
          end
          s7 << r10
        end
        if s7.last
          r7 = (SyntaxNode).new(input, i7...index, s7)
          r7.extend(SecondaryBrackets1)
        else
          self.index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          if input.index('\]', index) == index
            r11 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\]')
            r11 = nil
          end
          if r11
            r6 = r11
          else
            self.index = i6
            r6 = nil
          end
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      r5 = SyntaxNode.new(input, i5...index, s5)
      if r5
        r0 = r5
      else
        self.index = i0
        r0 = nil
      end
    end

    node_cache[:secondary_brackets][start_index] = r0

    return r0
  end

  module SecondaryAngle0
    def secondary_angle
      elements[1]
    end

  end

  module SecondaryAngle1
  end

  def _nt_secondary_angle
    start_index = index
    if node_cache[:secondary_angle].has_key?(index)
      cached = node_cache[:secondary_angle][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if input.index("<", index) == index
      r2 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("<")
      r2 = nil
    end
    s1 << r2
    if r2
      r3 = _nt_secondary_angle
      s1 << r3
      if r3
        if input.index(">", index) == index
          r4 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(">")
          r4 = nil
        end
        s1 << r4
      end
    end
    if s1.last
      r1 = (SyntaxNode).new(input, i1...index, s1)
      r1.extend(SecondaryAngle0)
    else
      self.index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      s5, i5 = [], index
      loop do
        i6 = index
        i7, s7 = index, []
        i8 = index
        if input.index(">", index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(">")
          r9 = nil
        end
        if r9
          r8 = nil
        else
          self.index = i8
          r8 = SyntaxNode.new(input, index...index)
        end
        s7 << r8
        if r8
          if index < input_length
            r10 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r10 = nil
          end
          s7 << r10
        end
        if s7.last
          r7 = (SyntaxNode).new(input, i7...index, s7)
          r7.extend(SecondaryAngle1)
        else
          self.index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          if input.index('\>', index) == index
            r11 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\>')
            r11 = nil
          end
          if r11
            r6 = r11
          else
            self.index = i6
            r6 = nil
          end
        end
        if r6
          s5 << r6
        else
          break
        end
      end
      r5 = SyntaxNode.new(input, i5...index, s5)
      if r5
        r0 = r5
      else
        self.index = i0
        r0 = nil
      end
    end

    node_cache[:secondary_angle][start_index] = r0

    return r0
  end

  module SecondarySquote0
  end

  module SecondarySquote1
  end

  def _nt_secondary_squote
    start_index = index
    if node_cache[:secondary_squote].has_key?(index)
      cached = node_cache[:secondary_squote][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if input.index("'", index) == index
      r1 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("'")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if input.index("'", index) == index
          r6 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r6 = nil
        end
        if r6
          r5 = nil
        else
          self.index = i5
          r5 = SyntaxNode.new(input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = (SyntaxNode).new(input, i4...index, s4)
          r4.extend(SecondarySquote0)
        else
          self.index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if input.index("\\'", index) == index
            r8 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("\\'")
            r8 = nil
          end
          if r8
            r3 = r8
          else
            self.index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = SyntaxNode.new(input, i2...index, s2)
      s0 << r2
      if r2
        if input.index("'", index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = (SyntaxNode).new(input, i0...index, s0)
      r0.extend(SecondarySquote1)
    else
      self.index = i0
      r0 = nil
    end

    node_cache[:secondary_squote][start_index] = r0

    return r0
  end

  module SecondaryDquote0
  end

  module SecondaryDquote1
  end

  def _nt_secondary_dquote
    start_index = index
    if node_cache[:secondary_dquote].has_key?(index)
      cached = node_cache[:secondary_dquote][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if input.index('"', index) == index
      r1 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if input.index('"', index) == index
          r6 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          self.index = i5
          r5 = SyntaxNode.new(input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = (SyntaxNode).new(input, i4...index, s4)
          r4.extend(SecondaryDquote0)
        else
          self.index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if input.index('\"', index) == index
            r8 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\"')
            r8 = nil
          end
          if r8
            r3 = r8
          else
            self.index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = SyntaxNode.new(input, i2...index, s2)
      s0 << r2
      if r2
        if input.index('"', index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = (SyntaxNode).new(input, i0...index, s0)
      r0.extend(SecondaryDquote1)
    else
      self.index = i0
      r0 = nil
    end

    node_cache[:secondary_dquote][start_index] = r0

    return r0
  end

  module SecondaryBacktick0
  end

  module SecondaryBacktick1
  end

  def _nt_secondary_backtick
    start_index = index
    if node_cache[:secondary_backtick].has_key?(index)
      cached = node_cache[:secondary_backtick][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if input.index('`', index) == index
      r1 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('`')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if input.index('`', index) == index
          r6 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('`')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          self.index = i5
          r5 = SyntaxNode.new(input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = (SyntaxNode).new(input, i4...index, s4)
          r4.extend(SecondaryBacktick0)
        else
          self.index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if input.index('\`', index) == index
            r8 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\`')
            r8 = nil
          end
          if r8
            r3 = r8
          else
            self.index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = SyntaxNode.new(input, i2...index, s2)
      s0 << r2
      if r2
        if input.index('`', index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('`')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = (SyntaxNode).new(input, i0...index, s0)
      r0.extend(SecondaryBacktick1)
    else
      self.index = i0
      r0 = nil
    end

    node_cache[:secondary_backtick][start_index] = r0

    return r0
  end

  module SecondarySlash0
  end

  module SecondarySlash1
  end

  def _nt_secondary_slash
    start_index = index
    if node_cache[:secondary_slash].has_key?(index)
      cached = node_cache[:secondary_slash][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if input.index('/', index) == index
      r1 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('/')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if input.index('/', index) == index
          r6 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          self.index = i5
          r5 = SyntaxNode.new(input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = (SyntaxNode).new(input, i4...index, s4)
          r4.extend(SecondarySlash0)
        else
          self.index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if input.index('\/', index) == index
            r8 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\/')
            r8 = nil
          end
          if r8
            r3 = r8
          else
            self.index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = SyntaxNode.new(input, i2...index, s2)
      s0 << r2
      if r2
        if input.index('/', index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('/')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = (SyntaxNode).new(input, i0...index, s0)
      r0.extend(SecondarySlash1)
    else
      self.index = i0
      r0 = nil
    end

    node_cache[:secondary_slash][start_index] = r0

    return r0
  end

  module SecondaryHash0
  end

  module SecondaryHash1
  end

  def _nt_secondary_hash
    start_index = index
    if node_cache[:secondary_hash].has_key?(index)
      cached = node_cache[:secondary_hash][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if input.index('#', index) == index
      r1 = (SyntaxNode).new(input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('#')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        i4, s4 = index, []
        i5 = index
        if input.index('#', index) == index
          r6 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('#')
          r6 = nil
        end
        if r6
          r5 = nil
        else
          self.index = i5
          r5 = SyntaxNode.new(input, index...index)
        end
        s4 << r5
        if r5
          if index < input_length
            r7 = (SyntaxNode).new(input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r7 = nil
          end
          s4 << r7
        end
        if s4.last
          r4 = (SyntaxNode).new(input, i4...index, s4)
          r4.extend(SecondaryHash0)
        else
          self.index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if input.index('\#', index) == index
            r8 = (SyntaxNode).new(input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('\#')
            r8 = nil
          end
          if r8
            r3 = r8
          else
            self.index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = SyntaxNode.new(input, i2...index, s2)
      s0 << r2
      if r2
        if input.index('#', index) == index
          r9 = (SyntaxNode).new(input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('#')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = (SyntaxNode).new(input, i0...index, s0)
      r0.extend(SecondaryHash1)
    else
      self.index = i0
      r0 = nil
    end

    node_cache[:secondary_hash][start_index] = r0

    return r0
  end

end

class SecondaryLiteralsParser < Treetop::Runtime::CompiledParser
  include SecondaryLiterals
end
